AWSTemplateFormatVersion: 2010-09-09

Description: >
  Demonstration template showing EC2 creation.  We give that instance the AmazonEC2RoleforSSM Instance Profile
  allowing us to connect to is via SSM Session Manager.  We also set up CloudWatch Logs to elevate transparency
  of the process and aid in troubleshooting.
  For this example you will need an existing VPC with a Private subnet, thus it has not exposure to the Internet (no
  InternetGateway, no NatGateway and no public IP.  Using VPC Private links, we will still be able to connect to it with
  SSM Session Manager.

Parameters:
  LatestAmiId:
    # Use public Systems Manager Parameter for AMI Image name
    # https://aws.amazon.com/blogs/compute/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Description: Select Amazon Linux(1) or 2
    Default: /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2
    AllowedValues:
      - /aws/service/ami-amazon-linux-latest/amzn-ami-hvm-x86_64-gp2 # Amazon Linux [1]
      - /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2 # Amazon Linux 2
  InstanceType:
    Type: String
    Default: t2.nano
    Description: Select an instance type
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3.nano
      - t3.micro

  # Parameters for the 'harness' VPC to host this demo.  All defaults are fine for our purposes.
  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16
  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24
  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24
  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "EC2 Settings"
        Parameters:
            - LatestAmiId
            - InstanceType
      -
        Label:
          default: "We create a boilerplate VPC to place the EC2 instance into"
        Parameters:
            - VpcCIDR
            - PublicSubnet1CIDR
            - PublicSubnet2CIDR
            - PrivateSubnet1CIDR
            - PrivateSubnet2CIDR

Resources:

  Ec2Instance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install configure CWLogs
      AWS::CloudFormation::Init:
        config:
          files:
            # Build our CWLogs Agent Configuration File, used in cloud init UserData below
            # see https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AgentReference.html
            "/etc/awslogs/awslogs.conf":
              content: !Sub |
                # writen by aws clodformation stack ${AWS::StackId}
                [general]
                state_file = /var/awslogs/agent-state
                # SSM Agent Logs
                # https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-agent-logs.html
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${Ec2InstanceSsmAgentLogGroup}
                log_stream_name = {instance_id}/ssm-agent.log
                datetime_format = %Y-%m-%d %H:%M:%S
                [/var/log/amazon/ssm/errors.log]
                file = /var/log/amazon/ssm/errors.log
                log_group_name = ${Ec2InstanceSsmErrorLogGroup}
                log_stream_name = {instance_id}/ssm-error.log
                datetime_format = %Y-%m-%d %H:%M:%S
            # The log group will be created in region specified in /etc/awslogs/awscli.conf
            # write this temp file we will move into place in cloud init script below
            "/etc/awslogs/awscli.replace.conf":
              content: !Sub |
                # writen by aws clodformation stack ${AWS::StackId}
                [plugins]
                cwlogs = cwlogs
                [default]
                region = ${AWS::Region}

    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      # KeyName: NO SSH Key needed
      IamInstanceProfile: !Ref Ec2InstanceProfile
      NetworkInterfaces:
        # *************** PrivateLink is configured so we need no public IP
        - AssociatePublicIpAddress: false
          DeviceIndex: 0
          GroupSet:
            - !Ref Ec2InstanceSecurityGroup
          # ************** We are in a PRIVATE subnet, no exposure to the Internet (No InternetGateway of NATGateway)
          SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: SSM Session Manager Private Instance Test
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # Get the latest CloudFormation package
          yum update -y aws-cfn-bootstrap
          # Start cfn-init
          /opt/aws/bin/cfn-init -s ${AWS::StackId} -r Ec2Instance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
          # make the needed dir for the cwlogs state_file
          mkdir /var/awslogs
          # Get the CloudWatch Logs agent
          yum install -y awslogs
          # overwrite awscli.conf with our copy
          mv /etc/awslogs/awscli.replace.conf /etc/awslogs/awscli.conf
          # Install the CloudWatch Logs agent (works with AWS Linux[1] or 2)
          if command -v systemctl >/dev/null; then systemctl start awslogsd; else service awslogs start; fi
          # Enable start on reboot (works with AWS Linux[1] or 2)
          if command -v systemctl >/dev/null; then systemctl enable awslogsd.service; else chkconfig awslogs on; fi
          # change the login shell for ssm-user, although amazon-ssm-agent still forces /bin/sh
          # https://github.com/aws/amazon-ssm-agent/issues/131
          usermod --shell /bin/bash ssm-user
          # All done so signal success
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource Ec2Instance --region ${AWS::Region}

  Ec2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ !Ref Ec2InstanceRole ]

  # By default, AWS Systems Manager doesn't have permission to perform actions on your instances.
  # You must grant access by using an AWS Identity and Access Management (IAM) instance profile.
  # https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-configuring-access-role.html
  Ec2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        # ********** This is really the only adjustment we need to make to enable use of SSM Session Manager
        #            All the AWS::CloudFormation::Init and cloud init script work is setting up cloudwatch logs
        #            to give visibility to the SSM Agent actions.
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action:
              - sts:AssumeRole
      Path: /

  # Attaching an SG with NO Ingress ports open
  Ec2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Test SG for SSM Session Manager
      VpcId: !Ref VPC
      # ********* Demonstrating SSM Session Manager can connect to Instance with NO Security Group ingress openings
      # SecurityGroupIngress:
      SecurityGroupEgress:
        - IpProtocol: -1 # all
          FromPort: -1 # all
          ToPort: -1 # all
          CidrIp: 0.0.0.0/0

  Ec2InstanceSsmAgentLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  Ec2InstanceSsmErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7


  #######################################################
  # Everything below here is just a boilerplate VPC
  # used to place the EC2 into a realistic scenario
  # There are no SSM specific features in the VPC, so
  # for the purposes of this exercise, it can be ignored.
  # \/  \/  \/  \/  \/  \/  \/  \/  \/  \/   \/   \/   \/
  #######################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      # as per docs, we need to enable both EnableDnsHostnames and EnableDnsSupport in this VPC so the SSM agent
      # will be able to connect using the regular public DNS names for SSM
      # https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-setting-up-vpc.html
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub Public Subnet (AZ2)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub Private Subnet (AZ2)

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Public Routes
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Private Routes (AZ1)

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub Private Routes (AZ2)

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  # ****************************
  # Here we build all the VPC endpoints needed in order for SSM Session Manager to be able to communicate with
  # and EC2 instance in a private subnet (with not routes to the Internet)

  # Open port 443 for SSM as per the docs
  # Incoming connections: https://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-setting-up-vpc.html
  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open 443 for SSM Session Manager for private subnets
      VpcId: !Ref VPC
      # allow traffic on 443 from the private subnets
      SecurityGroupIngress:
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnet1CIDR
        - IpProtocol: TCP
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PrivateSubnet2CIDR
      SecurityGroupEgress:
        - IpProtocol: -1 # all
          FromPort: -1 # all
          ToPort: -1 # all
          CidrIp: 0.0.0.0/0

  VpcEndpointInterfaceSsm:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
  VpcEndpointInterfaceEc2messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
  VpcEndpointInterfaceEc2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
  VpcEndpointInterfaceSsmmessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
  VpcEndpointGatewayS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - 'arn:aws:s3:::*'
      VpcId: !Ref VPC
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway


Outputs:
  SessionManagementUrl:
    Description: The URL to the Session Management Console for this instance
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/systems-manager/session-manager/${Ec2Instance}?region=${AWS::Region}
  CloudWatchLogsSsmAgentLog:
    Description: The URL to the CloudWatch Logs for the SSM Agent log
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logEventViewer:group=${Ec2InstanceSsmAgentLogGroup};stream=${Ec2Instance}/ssm-agent.log
  CloudWatchLogsSsmAgentErrorLog:
    Description: The URL to the CloudWatch Logs for the SSM Agent error log
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#logEventViewer:group=${Ec2InstanceSsmErrorLogGroup};stream=${Ec2Instance}/ssm-error.log
